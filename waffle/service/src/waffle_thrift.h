/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef waffle_thrift_H
#define waffle_thrift_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "proxy_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class waffle_thriftIf {
 public:
  virtual ~waffle_thriftIf() {}
  virtual int64_t get_client_id() = 0;
  virtual void register_client_id(const int32_t block_id, const int64_t client_id) = 0;
  virtual void async_get(const sequence_id& seq_id, const std::string& key) = 0;
  virtual void async_put(const sequence_id& seq_id, const std::string& key, const std::string& value) = 0;
  virtual void async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys) = 0;
  virtual void async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values) = 0;
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual void put(const std::string& key, const std::string& value) = 0;
  virtual void get_batch(std::vector<std::string> & _return, const std::vector<std::string> & keys) = 0;
  virtual void put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values) = 0;
};

class waffle_thriftIfFactory {
 public:
  typedef waffle_thriftIf Handler;

  virtual ~waffle_thriftIfFactory() {}

  virtual waffle_thriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(waffle_thriftIf* /* handler */) = 0;
  };

class waffle_thriftIfSingletonFactory : virtual public waffle_thriftIfFactory {
 public:
  waffle_thriftIfSingletonFactory(const ::std::shared_ptr<waffle_thriftIf>& iface) : iface_(iface) {}
  virtual ~waffle_thriftIfSingletonFactory() {}

  virtual waffle_thriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(waffle_thriftIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<waffle_thriftIf> iface_;
};

class waffle_thriftNull : virtual public waffle_thriftIf {
 public:
  virtual ~waffle_thriftNull() {}
  int64_t get_client_id() override {
    int64_t _return = 0;
    return _return;
  }
  void register_client_id(const int32_t /* block_id */, const int64_t /* client_id */) override {
    return;
  }
  void async_get(const sequence_id& /* seq_id */, const std::string& /* key */) override {
    return;
  }
  void async_put(const sequence_id& /* seq_id */, const std::string& /* key */, const std::string& /* value */) override {
    return;
  }
  void async_get_batch(const sequence_id& /* seq_id */, const std::vector<std::string> & /* keys */) override {
    return;
  }
  void async_put_batch(const sequence_id& /* seq_id */, const std::vector<std::string> & /* keys */, const std::vector<std::string> & /* values */) override {
    return;
  }
  void get(std::string& /* _return */, const std::string& /* key */) override {
    return;
  }
  void put(const std::string& /* key */, const std::string& /* value */) override {
    return;
  }
  void get_batch(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* keys */) override {
    return;
  }
  void put_batch(const std::vector<std::string> & /* keys */, const std::vector<std::string> & /* values */) override {
    return;
  }
};


class waffle_thrift_get_client_id_args {
 public:

  waffle_thrift_get_client_id_args(const waffle_thrift_get_client_id_args&) noexcept;
  waffle_thrift_get_client_id_args& operator=(const waffle_thrift_get_client_id_args&) noexcept;
  waffle_thrift_get_client_id_args() noexcept {
  }

  virtual ~waffle_thrift_get_client_id_args() noexcept;

  bool operator == (const waffle_thrift_get_client_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const waffle_thrift_get_client_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_client_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_get_client_id_pargs {
 public:


  virtual ~waffle_thrift_get_client_id_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_client_id_result__isset {
  _waffle_thrift_get_client_id_result__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_client_id_result__isset;

class waffle_thrift_get_client_id_result {
 public:

  waffle_thrift_get_client_id_result(const waffle_thrift_get_client_id_result&) noexcept;
  waffle_thrift_get_client_id_result& operator=(const waffle_thrift_get_client_id_result&) noexcept;
  waffle_thrift_get_client_id_result() noexcept
                                     : success(0) {
  }

  virtual ~waffle_thrift_get_client_id_result() noexcept;
  int64_t success;

  _waffle_thrift_get_client_id_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const waffle_thrift_get_client_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_get_client_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_client_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_client_id_presult__isset {
  _waffle_thrift_get_client_id_presult__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_client_id_presult__isset;

class waffle_thrift_get_client_id_presult {
 public:


  virtual ~waffle_thrift_get_client_id_presult() noexcept;
  int64_t* success;

  _waffle_thrift_get_client_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _waffle_thrift_register_client_id_args__isset {
  _waffle_thrift_register_client_id_args__isset() : block_id(false), client_id(false) {}
  bool block_id :1;
  bool client_id :1;
} _waffle_thrift_register_client_id_args__isset;

class waffle_thrift_register_client_id_args {
 public:

  waffle_thrift_register_client_id_args(const waffle_thrift_register_client_id_args&) noexcept;
  waffle_thrift_register_client_id_args& operator=(const waffle_thrift_register_client_id_args&) noexcept;
  waffle_thrift_register_client_id_args() noexcept
                                        : block_id(0),
                                          client_id(0) {
  }

  virtual ~waffle_thrift_register_client_id_args() noexcept;
  int32_t block_id;
  int64_t client_id;

  _waffle_thrift_register_client_id_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_client_id(const int64_t val);

  bool operator == (const waffle_thrift_register_client_id_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_register_client_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_register_client_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_register_client_id_pargs {
 public:


  virtual ~waffle_thrift_register_client_id_pargs() noexcept;
  const int32_t* block_id;
  const int64_t* client_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_register_client_id_result {
 public:

  waffle_thrift_register_client_id_result(const waffle_thrift_register_client_id_result&) noexcept;
  waffle_thrift_register_client_id_result& operator=(const waffle_thrift_register_client_id_result&) noexcept;
  waffle_thrift_register_client_id_result() noexcept {
  }

  virtual ~waffle_thrift_register_client_id_result() noexcept;

  bool operator == (const waffle_thrift_register_client_id_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const waffle_thrift_register_client_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_register_client_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_register_client_id_presult {
 public:


  virtual ~waffle_thrift_register_client_id_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _waffle_thrift_async_get_args__isset {
  _waffle_thrift_async_get_args__isset() : seq_id(false), key(false) {}
  bool seq_id :1;
  bool key :1;
} _waffle_thrift_async_get_args__isset;

class waffle_thrift_async_get_args {
 public:

  waffle_thrift_async_get_args(const waffle_thrift_async_get_args&);
  waffle_thrift_async_get_args& operator=(const waffle_thrift_async_get_args&);
  waffle_thrift_async_get_args() noexcept
                               : key() {
  }

  virtual ~waffle_thrift_async_get_args() noexcept;
  sequence_id seq_id;
  std::string key;

  _waffle_thrift_async_get_args__isset __isset;

  void __set_seq_id(const sequence_id& val);

  void __set_key(const std::string& val);

  bool operator == (const waffle_thrift_async_get_args & rhs) const
  {
    if (!(seq_id == rhs.seq_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_async_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_async_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_async_get_pargs {
 public:


  virtual ~waffle_thrift_async_get_pargs() noexcept;
  const sequence_id* seq_id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_async_put_args__isset {
  _waffle_thrift_async_put_args__isset() : seq_id(false), key(false), value(false) {}
  bool seq_id :1;
  bool key :1;
  bool value :1;
} _waffle_thrift_async_put_args__isset;

class waffle_thrift_async_put_args {
 public:

  waffle_thrift_async_put_args(const waffle_thrift_async_put_args&);
  waffle_thrift_async_put_args& operator=(const waffle_thrift_async_put_args&);
  waffle_thrift_async_put_args() noexcept
                               : key(),
                                 value() {
  }

  virtual ~waffle_thrift_async_put_args() noexcept;
  sequence_id seq_id;
  std::string key;
  std::string value;

  _waffle_thrift_async_put_args__isset __isset;

  void __set_seq_id(const sequence_id& val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const waffle_thrift_async_put_args & rhs) const
  {
    if (!(seq_id == rhs.seq_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_async_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_async_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_async_put_pargs {
 public:


  virtual ~waffle_thrift_async_put_pargs() noexcept;
  const sequence_id* seq_id;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_async_get_batch_args__isset {
  _waffle_thrift_async_get_batch_args__isset() : seq_id(false), keys(false) {}
  bool seq_id :1;
  bool keys :1;
} _waffle_thrift_async_get_batch_args__isset;

class waffle_thrift_async_get_batch_args {
 public:

  waffle_thrift_async_get_batch_args(const waffle_thrift_async_get_batch_args&);
  waffle_thrift_async_get_batch_args& operator=(const waffle_thrift_async_get_batch_args&);
  waffle_thrift_async_get_batch_args() noexcept {
  }

  virtual ~waffle_thrift_async_get_batch_args() noexcept;
  sequence_id seq_id;
  std::vector<std::string>  keys;

  _waffle_thrift_async_get_batch_args__isset __isset;

  void __set_seq_id(const sequence_id& val);

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const waffle_thrift_async_get_batch_args & rhs) const
  {
    if (!(seq_id == rhs.seq_id))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_async_get_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_async_get_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_async_get_batch_pargs {
 public:


  virtual ~waffle_thrift_async_get_batch_pargs() noexcept;
  const sequence_id* seq_id;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_async_put_batch_args__isset {
  _waffle_thrift_async_put_batch_args__isset() : seq_id(false), keys(false), values(false) {}
  bool seq_id :1;
  bool keys :1;
  bool values :1;
} _waffle_thrift_async_put_batch_args__isset;

class waffle_thrift_async_put_batch_args {
 public:

  waffle_thrift_async_put_batch_args(const waffle_thrift_async_put_batch_args&);
  waffle_thrift_async_put_batch_args& operator=(const waffle_thrift_async_put_batch_args&);
  waffle_thrift_async_put_batch_args() noexcept {
  }

  virtual ~waffle_thrift_async_put_batch_args() noexcept;
  sequence_id seq_id;
  std::vector<std::string>  keys;
  std::vector<std::string>  values;

  _waffle_thrift_async_put_batch_args__isset __isset;

  void __set_seq_id(const sequence_id& val);

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const waffle_thrift_async_put_batch_args & rhs) const
  {
    if (!(seq_id == rhs.seq_id))
      return false;
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_async_put_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_async_put_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_async_put_batch_pargs {
 public:


  virtual ~waffle_thrift_async_put_batch_pargs() noexcept;
  const sequence_id* seq_id;
  const std::vector<std::string> * keys;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_args__isset {
  _waffle_thrift_get_args__isset() : key(false) {}
  bool key :1;
} _waffle_thrift_get_args__isset;

class waffle_thrift_get_args {
 public:

  waffle_thrift_get_args(const waffle_thrift_get_args&);
  waffle_thrift_get_args& operator=(const waffle_thrift_get_args&);
  waffle_thrift_get_args() noexcept
                         : key() {
  }

  virtual ~waffle_thrift_get_args() noexcept;
  std::string key;

  _waffle_thrift_get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const waffle_thrift_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_get_pargs {
 public:


  virtual ~waffle_thrift_get_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_result__isset {
  _waffle_thrift_get_result__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_result__isset;

class waffle_thrift_get_result {
 public:

  waffle_thrift_get_result(const waffle_thrift_get_result&);
  waffle_thrift_get_result& operator=(const waffle_thrift_get_result&);
  waffle_thrift_get_result() noexcept
                           : success() {
  }

  virtual ~waffle_thrift_get_result() noexcept;
  std::string success;

  _waffle_thrift_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const waffle_thrift_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_presult__isset {
  _waffle_thrift_get_presult__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_presult__isset;

class waffle_thrift_get_presult {
 public:


  virtual ~waffle_thrift_get_presult() noexcept;
  std::string* success;

  _waffle_thrift_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _waffle_thrift_put_args__isset {
  _waffle_thrift_put_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _waffle_thrift_put_args__isset;

class waffle_thrift_put_args {
 public:

  waffle_thrift_put_args(const waffle_thrift_put_args&);
  waffle_thrift_put_args& operator=(const waffle_thrift_put_args&);
  waffle_thrift_put_args() noexcept
                         : key(),
                           value() {
  }

  virtual ~waffle_thrift_put_args() noexcept;
  std::string key;
  std::string value;

  _waffle_thrift_put_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const waffle_thrift_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_pargs {
 public:


  virtual ~waffle_thrift_put_pargs() noexcept;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_result {
 public:

  waffle_thrift_put_result(const waffle_thrift_put_result&) noexcept;
  waffle_thrift_put_result& operator=(const waffle_thrift_put_result&) noexcept;
  waffle_thrift_put_result() noexcept {
  }

  virtual ~waffle_thrift_put_result() noexcept;

  bool operator == (const waffle_thrift_put_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const waffle_thrift_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_presult {
 public:


  virtual ~waffle_thrift_put_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _waffle_thrift_get_batch_args__isset {
  _waffle_thrift_get_batch_args__isset() : keys(false) {}
  bool keys :1;
} _waffle_thrift_get_batch_args__isset;

class waffle_thrift_get_batch_args {
 public:

  waffle_thrift_get_batch_args(const waffle_thrift_get_batch_args&);
  waffle_thrift_get_batch_args& operator=(const waffle_thrift_get_batch_args&);
  waffle_thrift_get_batch_args() noexcept {
  }

  virtual ~waffle_thrift_get_batch_args() noexcept;
  std::vector<std::string>  keys;

  _waffle_thrift_get_batch_args__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const waffle_thrift_get_batch_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_get_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_get_batch_pargs {
 public:


  virtual ~waffle_thrift_get_batch_pargs() noexcept;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_batch_result__isset {
  _waffle_thrift_get_batch_result__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_batch_result__isset;

class waffle_thrift_get_batch_result {
 public:

  waffle_thrift_get_batch_result(const waffle_thrift_get_batch_result&);
  waffle_thrift_get_batch_result& operator=(const waffle_thrift_get_batch_result&);
  waffle_thrift_get_batch_result() noexcept {
  }

  virtual ~waffle_thrift_get_batch_result() noexcept;
  std::vector<std::string>  success;

  _waffle_thrift_get_batch_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const waffle_thrift_get_batch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_get_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_get_batch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _waffle_thrift_get_batch_presult__isset {
  _waffle_thrift_get_batch_presult__isset() : success(false) {}
  bool success :1;
} _waffle_thrift_get_batch_presult__isset;

class waffle_thrift_get_batch_presult {
 public:


  virtual ~waffle_thrift_get_batch_presult() noexcept;
  std::vector<std::string> * success;

  _waffle_thrift_get_batch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _waffle_thrift_put_batch_args__isset {
  _waffle_thrift_put_batch_args__isset() : keys(false), values(false) {}
  bool keys :1;
  bool values :1;
} _waffle_thrift_put_batch_args__isset;

class waffle_thrift_put_batch_args {
 public:

  waffle_thrift_put_batch_args(const waffle_thrift_put_batch_args&);
  waffle_thrift_put_batch_args& operator=(const waffle_thrift_put_batch_args&);
  waffle_thrift_put_batch_args() noexcept {
  }

  virtual ~waffle_thrift_put_batch_args() noexcept;
  std::vector<std::string>  keys;
  std::vector<std::string>  values;

  _waffle_thrift_put_batch_args__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const waffle_thrift_put_batch_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const waffle_thrift_put_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_put_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_batch_pargs {
 public:


  virtual ~waffle_thrift_put_batch_pargs() noexcept;
  const std::vector<std::string> * keys;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_batch_result {
 public:

  waffle_thrift_put_batch_result(const waffle_thrift_put_batch_result&) noexcept;
  waffle_thrift_put_batch_result& operator=(const waffle_thrift_put_batch_result&) noexcept;
  waffle_thrift_put_batch_result() noexcept {
  }

  virtual ~waffle_thrift_put_batch_result() noexcept;

  bool operator == (const waffle_thrift_put_batch_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const waffle_thrift_put_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const waffle_thrift_put_batch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class waffle_thrift_put_batch_presult {
 public:


  virtual ~waffle_thrift_put_batch_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class waffle_thriftClient : virtual public waffle_thriftIf {
 public:
  waffle_thriftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  waffle_thriftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t get_client_id() override;
  void send_get_client_id();
  int64_t recv_get_client_id();
  void register_client_id(const int32_t block_id, const int64_t client_id) override;
  void send_register_client_id(const int32_t block_id, const int64_t client_id);
  void recv_register_client_id();
  void async_get(const sequence_id& seq_id, const std::string& key) override;
  void send_async_get(const sequence_id& seq_id, const std::string& key);
  void async_put(const sequence_id& seq_id, const std::string& key, const std::string& value) override;
  void send_async_put(const sequence_id& seq_id, const std::string& key, const std::string& value);
  void async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys) override;
  void send_async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys);
  void async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values) override;
  void send_async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void get(std::string& _return, const std::string& key) override;
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  void put(const std::string& key, const std::string& value) override;
  void send_put(const std::string& key, const std::string& value);
  void recv_put();
  void get_batch(std::vector<std::string> & _return, const std::vector<std::string> & keys) override;
  void send_get_batch(const std::vector<std::string> & keys);
  void recv_get_batch(std::vector<std::string> & _return);
  void put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values) override;
  void send_put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void recv_put_batch();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class waffle_thriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<waffle_thriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (waffle_thriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_client_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_client_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_get_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_put_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  waffle_thriftProcessor(::std::shared_ptr<waffle_thriftIf> iface) :
    iface_(iface) {
    processMap_["get_client_id"] = &waffle_thriftProcessor::process_get_client_id;
    processMap_["register_client_id"] = &waffle_thriftProcessor::process_register_client_id;
    processMap_["async_get"] = &waffle_thriftProcessor::process_async_get;
    processMap_["async_put"] = &waffle_thriftProcessor::process_async_put;
    processMap_["async_get_batch"] = &waffle_thriftProcessor::process_async_get_batch;
    processMap_["async_put_batch"] = &waffle_thriftProcessor::process_async_put_batch;
    processMap_["get"] = &waffle_thriftProcessor::process_get;
    processMap_["put"] = &waffle_thriftProcessor::process_put;
    processMap_["get_batch"] = &waffle_thriftProcessor::process_get_batch;
    processMap_["put_batch"] = &waffle_thriftProcessor::process_put_batch;
  }

  virtual ~waffle_thriftProcessor() {}
};

class waffle_thriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  waffle_thriftProcessorFactory(const ::std::shared_ptr< waffle_thriftIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< waffle_thriftIfFactory > handlerFactory_;
};

class waffle_thriftMultiface : virtual public waffle_thriftIf {
 public:
  waffle_thriftMultiface(std::vector<std::shared_ptr<waffle_thriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~waffle_thriftMultiface() {}
 protected:
  std::vector<std::shared_ptr<waffle_thriftIf> > ifaces_;
  waffle_thriftMultiface() {}
  void add(::std::shared_ptr<waffle_thriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t get_client_id() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client_id();
    }
    return ifaces_[i]->get_client_id();
  }

  void register_client_id(const int32_t block_id, const int64_t client_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_client_id(block_id, client_id);
    }
    ifaces_[i]->register_client_id(block_id, client_id);
  }

  void async_get(const sequence_id& seq_id, const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_get(seq_id, key);
    }
    ifaces_[i]->async_get(seq_id, key);
  }

  void async_put(const sequence_id& seq_id, const std::string& key, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_put(seq_id, key, value);
    }
    ifaces_[i]->async_put(seq_id, key, value);
  }

  void async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_get_batch(seq_id, keys);
    }
    ifaces_[i]->async_get_batch(seq_id, keys);
  }

  void async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_put_batch(seq_id, keys, values);
    }
    ifaces_[i]->async_put_batch(seq_id, keys, values);
  }

  void get(std::string& _return, const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void put(const std::string& key, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, value);
    }
    ifaces_[i]->put(key, value);
  }

  void get_batch(std::vector<std::string> & _return, const std::vector<std::string> & keys) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_batch(_return, keys);
    }
    ifaces_[i]->get_batch(_return, keys);
    return;
  }

  void put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put_batch(keys, values);
    }
    ifaces_[i]->put_batch(keys, values);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class waffle_thriftConcurrentClient : virtual public waffle_thriftIf {
 public:
  waffle_thriftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  waffle_thriftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t get_client_id() override;
  int32_t send_get_client_id();
  int64_t recv_get_client_id(const int32_t seqid);
  void register_client_id(const int32_t block_id, const int64_t client_id) override;
  int32_t send_register_client_id(const int32_t block_id, const int64_t client_id);
  void recv_register_client_id(const int32_t seqid);
  void async_get(const sequence_id& seq_id, const std::string& key) override;
  void send_async_get(const sequence_id& seq_id, const std::string& key);
  void async_put(const sequence_id& seq_id, const std::string& key, const std::string& value) override;
  void send_async_put(const sequence_id& seq_id, const std::string& key, const std::string& value);
  void async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys) override;
  void send_async_get_batch(const sequence_id& seq_id, const std::vector<std::string> & keys);
  void async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values) override;
  void send_async_put_batch(const sequence_id& seq_id, const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void get(std::string& _return, const std::string& key) override;
  int32_t send_get(const std::string& key);
  void recv_get(std::string& _return, const int32_t seqid);
  void put(const std::string& key, const std::string& value) override;
  int32_t send_put(const std::string& key, const std::string& value);
  void recv_put(const int32_t seqid);
  void get_batch(std::vector<std::string> & _return, const std::vector<std::string> & keys) override;
  int32_t send_get_batch(const std::vector<std::string> & keys);
  void recv_get_batch(std::vector<std::string> & _return, const int32_t seqid);
  void put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values) override;
  int32_t send_put_batch(const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void recv_put_batch(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
